{"ro": [{"desc": "calcul functie", "id": "1", "solution": "// citim numarul x de la utilizator\nlet x = parseFloat(prompt('x='));\n\n// se calculeaza rezultatul functiei\nif (x < 10) {\n    console.log((-2*x + 3) / 2);\n} else {\n    console.log(-x/(4-x) + 1);\n}", "code": "// citim numarul x de la utilizator\n\n// se calculeaza rezultatul functiei"}, {"desc": "e(n, x)", "id": "2", "solution": "// citim numerele n si x de la utilizator\nlet n = parseInt(prompt('n='));\nlet x = parseInt(prompt('x='));\n\n// calculam rezultatul functiei folosind o bucla for\nlet rezultat = 1;\n\n// initializam produsele factoriale cu 1\nlet factorialN = 1;\nlet factorialX = 1;\n\n// folosim o bucla for pentru a generata toti pasii de la 1 la n\nfor (let iteratie = 1; iteratie <= n; iteratie++) {\n    // actualizam factorialele in functie de pasul curent\n    factorialX *= x;\n    factorialN *= iteratie;\n    \n    rezultat += factorialX / factorialN;\n}\n\nconsole.log(rezultat);", "code": "// citim numerele n si x de la utilizator\n\n// calculam rezultatul functiei folosind o bucla for\n\n// initializam produsele factoriale cu 1\n\n// folosim o bucla for pentru a generata toti pasii de la 1 la n\n\n    // actualizam factorialele in functie de pasul curent"}, {"desc": "fibonacci", "id": "3", "solution": "// citim numarul n de la utilizator\nlet n = parseInt(prompt('n='));\n\n// declaram doua variabile ce vor stoca valorile Fib(n-1) si Fib(n-2) de la fiecare pas al iteratiei\nlet fibMinus2 = 0, fibMinus1 = 1;\n\n// scriem o bucla for in care vom calcula valorile fiecarui element din sir\nfor (let i = 0; i <= n; i++) {\n    // daca pasul curent este mai mic decat 1, atunci valoarea elementului este numarul pasului\n    if (i <= 1) {\n        console.log(i);\n    } else {\n        // afisam valoarea termenului curent F(n-2) + F(n-1)\n        console.log(fibMinus2 + fibMinus1);\n        \n        // salvam valoarea termenului Fib(n-2) intrucat il vom suprascrie in linia urmatoare\n        let tempfibMinus2 = fibMinus2;\n\n        // noul Fib(n-2) este Fib(n-1)\n        fibMinus2 = fibMinus1;\n\n        // noul Fib(n-1) este suma dintre vechiul Fib(n-2) si vechiul Fib(n-1)\n        fibMinus1 = tempfibMinus2 + fibMinus1;\n    }\n}", "code": "// citim numarul n de la utilizator\n\n// declaram doua variabile ce vor stoca valorile Fib(n-1) si Fib(n-2) de la fiecare pas al iteratiei\n\n// scriem o bucla for in care vom calcula valorile fiecarui element din sir\n\n    // daca pasul curent este mai mic decat 1, atunci valoarea elementului este numarul pasului\n\n        // afisam valoarea termenului curent F(n-2) + F(n-1)\n\n        // salvam valoarea termenului Fib(n-2) intrucat il vom suprascrie in linia urmatoare\n\n        // noul Fib(n-2) este Fib(n-1)\n\n        // noul Fib(n-1) este suma dintre vechiul Fib(n-2) si vechiul Fib(n-1)"}, {"desc": "doua numere n si p, cate divizibile cu p", "id": "4", "solution": "// citim numarele intregi n si p de la utilizator\nlet n = parseInt(prompt('n='));\nlet p = parseInt(prompt('p='));\n\n// declaram o variabila nrDivizibile in care vom stoca numarul de numere divizibile cu p\nlet nrDivizibile = 0;\n\n// citim n numere intr-o bucla for\nfor (let nr = 1; nr <= n; nr++) {\n    let numar = parseInt(prompt('numar='));\n    \n    if (numar % p == 0)\n        nrDivizibile += 1;   \n}\n\nconsole.log(nrDivizibile);", "code": "// citim numarele intregi n si p de la utilizator\n\n// declaram o variabila nrDivizibile in care vom stoca numarul de numere divizibile cu p\n\n// citim n numere intr-o bucla for"}, {"desc": "6 numere cate alternari", "id": "5", "solution": "// declaram un vector ce va stoca cele 6 numere si ii citim valorile de la utilizator\nlet vectorNr = [];\nfor (let i = 0; i < 6; i++) {\n    vectorNr[i] = parseInt(prompt('numar='));\n}\n\n// declaram o variabila ce va stoca numarul de alternari\nlet alternari = 0;\n\n// parcurgem vectorul incepand cu prima pozitie dar neincluzand-o pe ultima intrucat la fiecare pas curent vom vizita si elementul urmator\nfor (let i = 0; i < 6 - 1; i++) {\n    // verificam daca exista alternanta si o numaram in caz afirmativ\n    if (vectorNr[i] * vectorNr[i + 1] < 0)\n        alternari += 1;\n}\n\nconsole.log(alternari);", "code": "// declaram un vector ce va stoca cele 6 numere si ii citim valorile de la utilizator\n\n// declaram o variabila ce va stoca numarul de alternari\n\n// parcurgem vectorul incepand cu prima pozitie dar neincluzand-o pe ultima intrucat la fiecare pas curent vom vizita si elementul urmator\n\n    // verificam daca exista alternanta si o numaram in caz afirmativ"}, {"desc": "toate numere de 3 cifre cu cifrele in ordine crescÄƒtoare", "id": "7", "solution": "// folosim 3 bucle for pentru a genera cifrele sutelor, zecilor si unitatilor\n// toate cifrele merg pana la 9 insa trebuie sa inceapa de la valoarea cifrei precedente pentru a respecta conditia de cifre in ordine crescatoare\nfor (let sute = 1; sute <= 9; sute++)\n    for (let zeci = sute; zeci <= 9; zeci++)\n        for (let unit = zeci; unit <= 9; unit++) {\n            console.log(sute * 100 + zeci * 10 + unit);\n        }", "code": "// folosim 3 bucle for pentru a genera cifrele sutelor, zecilor si unitatilor\n// toate cifrele merg pana la 9 insa trebuie sa inceapa de la valoarea cifrei precedente pentru a respecta conditia de cifre in ordine crescatoare"}, {"desc": "collatz", "id": "8", "solution": "// citim numarul n de la utilizator\nlet n = parseInt(prompt('n='));\n\n// folosim o bucla while pentru a repeta formula atat timp can n nu este 1\nlet iteratii = 0;\nwhile (n != 1) {\n    // testam la fiecare iteratie daca n este par sau impar si aplicam ecuatia specifica\n    if (n % 2 == 0) n /= 2;\n    else n = 3*n + 1;\n  \n    // incrementam numarul de iteratii\n    iteratii++;\n}\n\n// afisam numarul de iteratii\nconsole.log('Numar iteratii:', iteratii)", "code": "// citim numarul n de la utilizator\n\n// folosim o bucla while pentru a repeta formula atat timp can n nu este 1\n\n    // testam la fiecare iteratie daca n este par sau impar si aplicam ecuatia specifica\n\n    // incrementam numarul de iteratii\n\n// afisam numarul de iteratii"}], "src-ro": "structuri.ro.snip"}