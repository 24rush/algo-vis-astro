{"ro": [{"desc": "Să se declare un vector ce conține toate numerele naturale de la 1 la 5", "id": "1", "solution": "// declaram o variabila vectorNr si o initializam cu numerele de la 1 la 5\nlet vectorNr = [1, 2, 3, 4, 5];\n\n// folosim console.log si afisam a treia valoare din acest vector (adica elementul de pe pozitia 2)\nconsole.log(vectorNr[2]);", "code": "// declaram o variabila vectorNr si o initializam cu numerele de la 1 la 5\n\n// folosim console.log si afisam a treia valoare din acest vector"}, {"desc": "parcurgere plus ridicare la putere", "id": "2", "solution": "// declaram o variabila vectorNr si o initializam cu numerele de la 1 la 5\nlet vectorNr = [1, 2, 3, 4, 5];\n\n// parcurgem vectorul folosind o bucla for incepand cu pozitia 0 pana la length\nfor (let index = 0; index < vectorNr.length; index++) {\n    console.log(vectorNr[index] * vectorNr[index]);\n}", "code": "// declaram o variabila vectorNr si o initializam cu numerele de la 1 la 5\n\n// parcurgem vectorul folosind o bucla for"}, {"desc": "introducere valoarea 6 la final plus 0 la inceput", "id": "3", "solution": "// declaram o variabila vectorNr si o initializam cu numerele de la 1 la 5\nlet vectorNr = [1, 2, 3, 4, 5];\n\n// folosim functiile push si unshift pentru a realiza operatiile de adaugare\nvectorNr.push(6);\nvectorNr.unshift(-1);", "code": "// declaram o variabila vectorNr si o initializam cu numerele de la 1 la 5\n\n// folosim functiile push si unshift pentru a realiza operatiile de adaugare"}, {"desc": "afisare ultime 3 elemente din vector", "id": "4", "solution": "// declaram o variabila vectorNr si o initializam cu numerele de la 1 la 5\nlet vectorNr = [1, 2, 3, 4, 5];\n\n// folosim functia slice\nconsole.log(vectorNr.slice(2));", "code": "// declaram o variabila vectorNr si o initializam cu numerele de la 1 la 5\n\n// folosim functia slice"}, {"desc": "șteargă primul element al vectorului", "id": "5", "solution": "// declaram o variabila vectorNr si o initializam cu numerele de la 1 la 5\nlet vectorNr = [1, 2, 3, 4, 5];\n\n// stergem primul element folosind functia shift\nvectorNr.shift();\nconsole.log(vectorNr);\n\n// stergem primul element folosind functia slice insa trebuie avut in vedere ca aceasta functie nu modifica vectorul pe care este aplicata\nvectorNr = vectorNr.slice(1);\nconsole.log(vectorNr);", "code": "// declaram o variabila vectorNr si o initializam cu numerele de la 1 la 5\n\n// stergem primul element folosind functia shift\n\n// stergem primul element folosind functia slice"}, {"desc": "vector nou cu elementele in ordine inversa", "id": "6", "solution": "// declaram o variabila vectorNr si o initializam cu numerele de la 1 la 5\nlet vectorNr = [1, 2, 3, 4, 5];\n\n// functia reverse modifica continutul vectorului pe care este aplicata de aceea trebuie sa o aplicam unei copii\nlet vectorNrReversed = vectorNr.slice().reverse();\nconsole.log(vectorNrReversed);", "code": "// declaram o variabila vectorNr si o initializam cu numerele de la 1 la 5\n\n// folosim functia slice + reverse avand in vedere ca reverse modifica continutul vectorului original iar noi nu ne dorim asta"}, {"desc": "cautare valoare plus inserare", "id": "7", "solution": "// declaram o variabila vectorNr si o initializam cu numerele de la 1 la 5\nlet vectorNr = [1, 2, 3, 4, 5];\n\n// citim valoarea pe care urmeaza sa o cautam\nlet searchVal = prompt('Valoare de cautat')\n\n// convertim textul introdus de utilizator la reprezentarea sa numerica\nlet searchValNumeric = parseInt(searchVal);\n\n// cautam valoarea specificata de utilizator in vectorNr\nlet posSearchVal = vectorNr.indexOf(searchValNumeric);\n\n// daca nu gasim valoarea o introducem la sfarsit\nif (posSearchVal == -1) {\n    vectorNr.push(searchValNumeric)\n}\n\nconsole.log(vectorNr)", "code": "// declaram o variabila vectorNr si o initializam cu numerele de la 1 la 5\n\n// citim valoarea pe care urmeaza sa o cautam\n\n// convertim textul introdus de utilizator la reprezentarea sa numerica\n\n// cautam valoarea specificata de utilizator in vectorNr\n\n// daca nu gasim valoarea o introducem la sfarsit"}, {"desc": "citim vector n elemente, lungimea celui mai mare sir crescator", "id": "8", "solution": "// citim numarul n si vectorul de elemente\nlet n = parseInt(prompt('n='));\n\nlet vectorNr = [];\nfor (let i = 0; i < n; i++) {\n    vectorNr[i] = parseInt(prompt('numar='));\n}\n\n// declaram variabila ce va stoca lungimea celui mai mare sir dar si variabila ce va stoca maximul\nlet lgCurentaSirCrescator = 0;\nlet lgMaxima = 0;\n\n// parcurgem vectorul si verificam la fiecare pas daca elementul ce urmeaza este mai mare decat cel curent\nfor (let i = 0; i < n - 1; i++) {\n    // verifcam daca elementele adiacente sunt in ordine crescatoare si incrementam lungimea sirului curent\n    if (vectorNr[i] < vectorNr[i + 1]) {\n        lgCurentaSirCrescator += 1;\n        \n        // actualizam lungimea maxima verificand-o contra lungimii curente\n        if (lgCurentaSirCrescator > lgMaxima)\n            lgMaxima = lgCurentaSirCrescator + 1;\n    } else {\n        // daca sirul nu mai este crescator resetam lungime curenta \n        lgCurentaSirCrescator = 0;\n    }\n}\n\nconsole.log(lgMaxima)", "code": "// citim numarul n si vectorul de elemente\n\n// declaram variabila ce va stoca lungimea celui mai mare sir dar si variabila ce va stoca maximul\n\n// parcurgem vectorul si verificam la fiecare pas daca elementul ce urmeaza este mai mare decat cel curent\n\n    // verifcam daca elementele adiacente sunt in ordine crescatoare si incrementam lungimea sirului curent\n\n        // actualizam lungimea maxima verificand-o contra lungimii curente\n\n        // daca sirul nu mai este crescator resetam lungime curenta"}, {"desc": "cifre in vector", "id": "9", "solution": "// cream o functie care primeste numarul ca parametru si intoarce un array continand cifrele sale\nfunction numarInArray(numar) {\n    // declaram vectorul in care vom pune cifrele alaturi de contorul cu care il vom parcurge\n    let cifre = [];\n    let i = 0;\n\n    // daca numarul este 0 atunci deja umplem vectorul cu valoarea 0\n    if (numar == 0) \n        cifre[0] = 0;\n\n    while (numar > 0) {\n        cifre[i] = numar % 10;\n        numar = Math.floor(numar / 10);\n        i++;\n    }\n\n    return cifre;\n}\n\n// citim numarul de la utilizator\nlet n = parseInt(prompt('n='));\n\n// apelam functia folosind numarul introdus de utilizator\nconsole.log(numarInArray(n));", "code": "// cream o functie care primeste numarul ca parametru si intoarce un array continand cifrele sale\n\n    // declaram vectorul in care vom pune cifrele alaturi de contorul cu care il vom parcurge\n\n    // daca numarul este 0 atunci deja umplem vectorul cu valoarea 0\n\n// citim numarul de la utilizator\n\n// apelam functia folosind numarul introdus de utilizator"}, {"desc": "perechi a + b = S", "id": "10", "solution": "// copiem functia creata in exercitiul precedent\nfunction numarInArray(numar) {\n    // declaram vectorul in care vom pune cifrele alaturi de contorul cu care il vom parcurge\n    let cifre = [];\n    let i = 0;\n\n    // daca numarul este 0 atunci deja umplem vectorul cu valoarea 0\n    if (numar == 0) \n        cifre[0] = 0;\n\n    while (numar > 0) {\n        cifre[i] = numar % 10;\n        numar = Math.floor(numar / 10);\n        i++;\n    }\n\n    return cifre;\n}\n\n// citim S de la utilizator\nlet S = parseInt(prompt('S='));\n\n// scriem bucla for prin care generam fiecare potentiala valoare a\nfor (let a = 0; a <= S; a++) {\n    // aflam valoarea lui b prin diferenta din S\n    let b = S - a;\n\n    // generam vectorii de cifre aferenti celor doua numere a si b\n    let cifreA = numarInArray(a);\n    let cifreB = numarInArray(b);\n\n    // parcurgem cei doi vectori si determinam daca existe elemente comune in ei\n    let cifreComune = false;\n    for (let i = 0; i < cifreA.length; i++) {\n        // intrerupem bucla for daca cea interioara a gasit o cifra comuna\n        if (cifreComune)\n            break;\n\n        for (let j = 0; j < cifreB.length; j++) {\n            // atunci cand gasim un element comun intrerupem buclele\n            if (cifreA[i] == cifreB[j]) {\n                cifreComune = true;\n                // aceasta clauza va intrerupe doar o bucla for\n                break;\n            }\n        }\n    }\n\n    if (!cifreComune) {\n        console.log(a, b);\n    }\n}", "code": "// copiem functia creata in exercitiul precedent\n\n// citim S de la utilizator\n\n// scriem bucla for prin care generam fiecare potentiala valoare a\n\n    // aflam valoarea lui b prin diferenta din S\n\n    // generam vectorii de cifre aferenti celor doua numere a si b\n\n    // parcurgem cei doi vectori si determinam daca existe elemente comune in ei"}], "src-ro": "vectori.ro.snip"}