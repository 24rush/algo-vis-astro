---
import "bootstrap/dist/css/bootstrap.min.css";
import "../../public/assets/styles/av-wp-styles.css";
import "../../public/assets/styles/av-styles.css";
import "../styles/main.scss";

import HeadCommon from "../components/HeadCommon.astro";
import ScriptsCommon from "../components/ScriptsCommon.astro";

import HeadSEO from "../components/HeadSEO.astro";
import MainButton from "../components/MainButton.astro";
import Algovis from "../components/Content/Algovis.astro";
import Counters from "../components/Header/Counters.astro";

import * as CONFIG from "../config";

const { content = {} } = Astro.props;
---

<html dir={content.dir ?? "ltr"} lang={content.lang ?? "en-us"} class="initial">
  <head>
    <meta charset="UTF-8" />
    <HeadCommon />
    <HeadSEO {content} canonicalURL={new URL(Astro.url.pathname, Astro.site)} />
    <title>
      {
        content.title
          ? `${content.title} ðŸš€ ${CONFIG.SITE.title}`
          : CONFIG.SITE.title
      }
    </title>
  </head>
  <body>
    <div class="text-center">
      <header class="pt-12 pb-2 px-4 bg-gradient-to-br from-slate-700 to-black">
        <div class="flex items-center justify-center p-4">
          <img
            src="/astro-design-system-logo.svg"
            alt="Astro Design System Logo"
          />
        </div>
        <h1 class="text-white text-4xl font-medium drop-shadow-sm">
          <span>de la 0 la 100 Ã®n programare pe fast-forward</span>
        </h1>
        <p class="text-lg mt-8 text-slate-300">
          Vezi cum funcÈ›ioneazÄƒ un program 'pe interior' rulÃ¢nd fiecare
          instrucÈ›iune pas cu pas. ÃŽn ritmul tÄƒu.
        </p>

        <Counters />

        <div class="pt-6">
          <MainButton primary>
            <a href="notiuni_de_baza/programarea">Mergi la prima lecÈ›ie</a>
          </MainButton>
        </div>
        <div class="arrow my-6"></div>
      </header>

      <nav class="content">
        

        <!--Algovis config_id="landing-page-samples.json" av_autoplay /-->
      </nav>
    </div>

    <ScriptsCommon />
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.7.0/p5.min.js"></script>
    <!--script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.7.0/addons/p5.sound.min.js"></script-->

    <script type="text/javascript" src="https://toolness.github.io/p5.js-widget/p5-widget.js"></script>
    <script type="text/p5">
      function setup() {
        createCanvas(100, 100);
      }
      
      function draw() {
        background(255, 0, 200);
      }
      </script>

    <script type="text/javascript">
      let snowflakes = []; // array to hold snowflake objects
      
      function setup() {
      createCanvas(400, 600);
      fill(240);
      noStroke();
      }
      
      function draw() {
      background('brown');
      let t = frameCount / 60; // update time
      
      // create a random number of snowflakes each frame
      for (let i = 0; i < random(5); i++) {
        snowflakes.push(new snowflake()); // append snowflake object
      }
      
      // loop through snowflakes with a for..of loop
      for (let flake of snowflakes) {
        flake.update(t); // update snowflake position
        flake.display(); // draw snowflake
      }
      }
      
      // snowflake class
      function snowflake() {
      // initialize coordinates
      this.posX = 0;
      this.posY = random(-50, 0);
      this.initialangle = random(0, 2 * PI);
      this.size = random(2, 5);
      
      // radius of snowflake spiral
      // chosen so the snowflakes are uniformly spread out in area
      this.radius = sqrt(random(pow(width / 2, 2)));
      
      this.update = function(time) {
        // x position follows a circle
        let w = 0.6; // angular speed
        let angle = w * time + this.initialangle;
        this.posX = width / 2 + this.radius * sin(angle);
      
        // different size snowflakes fall at slightly different y speeds
        this.posY += pow(this.size, 0.5);
      
        // delete snowflake if past end of screen
        if (this.posY > height) {
          let index = snowflakes.indexOf(this);
          snowflakes.splice(index, 1);
        }
      };
      
      this.display = function() {
        ellipse(this.posX, this.posY, this.size);
      };
      }
      
      new p5();
    </script>
  </body>
</html>


  
